@using System.IO
@using Microsoft.Extensions.Caching.Memory;
@inject I_Api_Helper apiHelper;
@inject IMemoryCache cache;
@model String
@{

    var views = new List<FileInfo>();
    string typeString = ViewContext.HttpContext.Request.Query["type"];
    if (string.IsNullOrEmpty(typeString))
    {
        typeString = ViewContext.HttpContext.Request.Query["p_type"];
    }
    if (string.IsNullOrEmpty(typeString))
    {
        if (ViewBag.Level0Type != null)
        {
            typeString = ViewBag.Level0Type.Name;
        }
    }
    if (!string.IsNullOrEmpty(typeString))
    {
        string cacheKey = "allowedViews_" + typeString;
        views = cache.Get<List<FileInfo>>(cacheKey);
        if (views == null)
        {
            views = apiHelper.AllowedViews(typeString, new string[] { "~/views/shared/", "~/views/_ViewStart.cshtml" });
            cache.Set(cacheKey,views,TimeSpan.FromMinutes(30));
        }
        if (views.Count == 0)
        {
            views = apiHelper.Views(new string[] { "~/views/shared/", "~/views/_ViewStart.cshtml" });
        }
    }
    else
    {
        views = apiHelper.Views(new string[] { "~/views/shared/", "~/views/_ViewStart.cshtml" });
    }
    <select name="@ViewData.ModelMetadata.PropertyName">
        @foreach (var f in views.OrderBy(x => x.Name).ToList())
        {
            var selected = string.IsNullOrEmpty(Model) ? false : Model.ToLower().Equals(ApiHelper.ToVirtualPath(f.FullName).ToLower());
            <option @(selected ? "selected" : "") value="@ApiHelper.ToVirtualPath(f.FullName)">
                @f.Name
            </option>
        }
    </select>
}